/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Connection.ConexaoBD;
import Persistence.ClientesDAO;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.canvas.draw.SolidLine;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.LineSeparator;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import java.awt.BorderLayout;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Guerra
 */
public class OrdemServicoview extends javax.swing.JFrame {

    private final ClientesDAO clientesDAO;

    /**
     * Creates new form OrdemServiço
     *
     * @throws java.lang.Exception
     */
    public OrdemServicoview() throws Exception {
        initComponents();
        configurarScrollPane();
        clientesDAO = new ClientesDAO(); // Inicializa o objeto ClientesDAO
        ListasNomes.setVisible(false);
        ScrollLista.setVisible(false);

        listServicos.setVisible(false);
        ScrollServicos.setVisible(false);

    }

    private void configurarScrollPane() {
        JScrollPane scrollPane = new JScrollPane(ordemServico);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        panelScroll.setLayout(new BorderLayout());
        panelScroll.add(scrollPane, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelScroll = new javax.swing.JPanel();
        ordemServico = new javax.swing.JPanel();
        panelCliente = new javax.swing.JPanel();
        ScrollLista = new javax.swing.JScrollPane();
        ListasNomes = new javax.swing.JList<>();
        textocpfcnpj = new javax.swing.JTextField();
        labelCliente = new javax.swing.JLabel();
        textcodOS = new javax.swing.JTextField();
        LabelCodigoOs = new javax.swing.JLabel();
        textoNome = new javax.swing.JTextField();
        labelIdentificador = new javax.swing.JLabel();
        labalEndereco = new javax.swing.JLabel();
        textEndereco = new javax.swing.JTextField();
        labelEndereco = new javax.swing.JLabel();
        textTelefones = new javax.swing.JTextField();
        labelContato = new javax.swing.JLabel();
        textContato = new javax.swing.JTextField();
        labelInsEst = new javax.swing.JLabel();
        textInsEst = new javax.swing.JTextField();
        labelEmail = new javax.swing.JLabel();
        textEmail = new javax.swing.JTextField();
        statusCombox = new javax.swing.JComboBox<>();
        panelVeiculos = new javax.swing.JPanel();
        veiculoclienteVinculado = new javax.swing.JTextField();
        labelVeiculos = new javax.swing.JLabel();
        labelModelo = new javax.swing.JLabel();
        textModelo = new javax.swing.JTextField();
        labelPlaca = new javax.swing.JLabel();
        textPlaca = new javax.swing.JTextField();
        labelMarca = new javax.swing.JLabel();
        textMarca = new javax.swing.JTextField();
        labelChassi = new javax.swing.JLabel();
        textChassi = new javax.swing.JTextField();
        labelKM = new javax.swing.JLabel();
        textKM = new javax.swing.JTextField();
        labelAcess = new javax.swing.JLabel();
        textAccs = new javax.swing.JTextField();
        panelNome = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Servico = new javax.swing.JPanel();
        labelServico = new javax.swing.JLabel();
        labelValor = new javax.swing.JLabel();
        textValor = new javax.swing.JTextField();
        adicionarServico = new javax.swing.JButton();
        removerServico = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        adicionarColaborador = new javax.swing.JButton();
        textServicos = new javax.swing.JTextField();
        ScrollServicos = new javax.swing.JScrollPane();
        listServicos = new javax.swing.JList<>();
        textColaborador = new javax.swing.JTextField();
        Pecas = new javax.swing.JPanel();
        labelPecas = new javax.swing.JLabel();
        comboxPecas = new javax.swing.JComboBox<>();
        spinnerPecas = new javax.swing.JSpinner();
        adicionarPecas = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePecassub = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableServicoexecutar = new javax.swing.JTable();
        painelFinal = new javax.swing.JPanel();
        labelPagamento = new javax.swing.JLabel();
        escolhaPagamento = new javax.swing.JComboBox<>();
        labelTotal = new javax.swing.JLabel();
        textValorTotal = new javax.swing.JTextField();
        gerarOspdf = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelCliente.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        panelCliente.setLayout(null);

        ScrollLista.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ListasNomes.setBorder(null);
        ListasNomes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListasNomesMouseClicked(evt);
            }
        });
        ScrollLista.setViewportView(ListasNomes);

        panelCliente.add(ScrollLista);
        ScrollLista.setBounds(250, 50, 210, 100);

        textocpfcnpj.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        textocpfcnpj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textocpfcnpjActionPerformed(evt);
            }
        });
        textocpfcnpj.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textocpfcnpjKeyReleased(evt);
            }
        });
        panelCliente.add(textocpfcnpj);
        textocpfcnpj.setBounds(250, 30, 211, 20);

        labelCliente.setText("Cliente");
        panelCliente.add(labelCliente);
        labelCliente.setBounds(730, 10, 98, 16);
        panelCliente.add(textcodOS);
        textcodOS.setBounds(34, 29, 110, 31);

        LabelCodigoOs.setText("Código OS");
        panelCliente.add(LabelCodigoOs);
        LabelCodigoOs.setBounds(34, 9, 57, 16);

        textoNome.setEditable(false);
        panelCliente.add(textoNome);
        textoNome.setBounds(726, 21, 199, 30);

        labelIdentificador.setText("CPF/CNPJ");
        panelCliente.add(labelIdentificador);
        labelIdentificador.setBounds(250, 10, 100, 16);

        labalEndereco.setText("Endereço");
        panelCliente.add(labalEndereco);
        labalEndereco.setBounds(726, 57, 61, 16);

        textEndereco.setEditable(false);
        panelCliente.add(textEndereco);
        textEndereco.setBounds(726, 71, 377, 30);

        labelEndereco.setText("Fones");
        panelCliente.add(labelEndereco);
        labelEndereco.setBounds(934, 7, 70, 16);

        textTelefones.setEditable(false);
        panelCliente.add(textTelefones);
        textTelefones.setBounds(937, 21, 237, 30);

        labelContato.setText("Contato");
        panelCliente.add(labelContato);
        labelContato.setBounds(1188, 7, 80, 16);
        panelCliente.add(textContato);
        textContato.setBounds(1192, 21, 186, 30);

        labelInsEst.setText("Ins.Est");
        panelCliente.add(labelInsEst);
        labelInsEst.setBounds(1115, 57, 70, 16);

        textInsEst.setEditable(false);
        panelCliente.add(textInsEst);
        textInsEst.setBounds(1115, 71, 253, 30);

        labelEmail.setText("E-mail");
        panelCliente.add(labelEmail);
        labelEmail.setBounds(726, 107, 59, 16);

        textEmail.setEditable(false);
        panelCliente.add(textEmail);
        textEmail.setBounds(726, 121, 377, 30);

        statusCombox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Aberta", "Em andamento", "Concluida", "Cancelada" }));
        statusCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusComboxActionPerformed(evt);
            }
        });
        panelCliente.add(statusCombox);
        statusCombox.setBounds(40, 90, 110, 22);

        panelVeiculos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        veiculoclienteVinculado.setEditable(false);

        labelVeiculos.setText("Veiculo");

        labelModelo.setText("Modelo");

        textModelo.setEditable(false);

        labelPlaca.setText("Placa");

        labelMarca.setText("Marca");

        labelChassi.setText("N Chassi");

        labelKM.setText("Kilometragem");

        labelAcess.setText("Acessorios");

        javax.swing.GroupLayout panelVeiculosLayout = new javax.swing.GroupLayout(panelVeiculos);
        panelVeiculos.setLayout(panelVeiculosLayout);
        panelVeiculosLayout.setHorizontalGroup(
            panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVeiculosLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelVeiculos)
                    .addComponent(labelMarca)
                    .addComponent(textMarca, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addComponent(veiculoclienteVinculado))
                .addGap(18, 18, 18)
                .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVeiculosLayout.createSequentialGroup()
                        .addComponent(textPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textKM, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelVeiculosLayout.createSequentialGroup()
                        .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelModelo)
                            .addComponent(textModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelPlaca))
                        .addGap(18, 18, 18)
                        .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textChassi, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelChassi)
                            .addGroup(panelVeiculosLayout.createSequentialGroup()
                                .addComponent(labelKM)
                                .addGap(161, 161, 161)
                                .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelAcess)
                                    .addComponent(textAccs, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelVeiculosLayout.setVerticalGroup(
            panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVeiculosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelVeiculos)
                    .addComponent(labelModelo)
                    .addComponent(labelChassi))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(veiculoclienteVinculado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textChassi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPlaca)
                    .addComponent(labelMarca)
                    .addComponent(labelKM)
                    .addComponent(labelAcess))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVeiculosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textKM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textAccs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelNome.setBackground(new java.awt.Color(0, 0, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Ordem de Serviço");

        javax.swing.GroupLayout panelNomeLayout = new javax.swing.GroupLayout(panelNome);
        panelNome.setLayout(panelNomeLayout);
        panelNomeLayout.setHorizontalGroup(
            panelNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNomeLayout.createSequentialGroup()
                .addGap(721, 721, 721)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelNomeLayout.setVerticalGroup(
            panelNomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNomeLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        Servico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        Servico.setLayout(null);

        labelServico.setText("Serviços");
        Servico.add(labelServico);
        labelServico.setBounds(7, 7, 130, 16);

        labelValor.setText("Valor R$:");
        Servico.add(labelValor);
        labelValor.setBounds(333, 7, 90, 16);
        Servico.add(textValor);
        textValor.setBounds(333, 29, 138, 22);

        adicionarServico.setText("Adicionar");
        adicionarServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarServicoActionPerformed(evt);
            }
        });
        Servico.add(adicionarServico);
        adicionarServico.setBounds(489, 29, 81, 23);

        removerServico.setText("Remover");
        removerServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerServicoActionPerformed(evt);
            }
        });
        Servico.add(removerServico);
        removerServico.setBounds(588, 29, 90, 23);

        jLabel2.setText("Colaborador");
        Servico.add(jLabel2);
        jLabel2.setBounds(330, 70, 240, 16);

        adicionarColaborador.setText("Adicionar");
        Servico.add(adicionarColaborador);
        adicionarColaborador.setBounds(820, 110, 81, 23);

        textServicos.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        textServicos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textServicosKeyReleased(evt);
            }
        });
        Servico.add(textServicos);
        textServicos.setBounds(10, 30, 270, 20);

        ScrollServicos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        listServicos.setBorder(null);
        listServicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listServicosMouseClicked(evt);
            }
        });
        ScrollServicos.setViewportView(listServicos);

        Servico.add(ScrollServicos);
        ScrollServicos.setBounds(10, 50, 270, 110);
        Servico.add(textColaborador);
        textColaborador.setBounds(330, 90, 210, 22);

        Pecas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        labelPecas.setText("Peças");

        comboxPecas.setEditable(true);

        adicionarPecas.setText("Adicionar");

        javax.swing.GroupLayout PecasLayout = new javax.swing.GroupLayout(Pecas);
        Pecas.setLayout(PecasLayout);
        PecasLayout.setHorizontalGroup(
            PecasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PecasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PecasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPecas)
                    .addGroup(PecasLayout.createSequentialGroup()
                        .addComponent(comboxPecas, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerPecas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(adicionarPecas)))
                .addContainerGap(248, Short.MAX_VALUE))
        );
        PecasLayout.setVerticalGroup(
            PecasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PecasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPecas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PecasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboxPecas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerPecas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adicionarPecas))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        tablePecassub.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Peças a substituir", "Qtd", "Valor Un", "Total"
            }
        ));
        jScrollPane1.setViewportView(tablePecassub);
        if (tablePecassub.getColumnModel().getColumnCount() > 0) {
            tablePecassub.getColumnModel().getColumn(0).setMinWidth(100);
            tablePecassub.getColumnModel().getColumn(0).setPreferredWidth(400);
            tablePecassub.getColumnModel().getColumn(0).setMaxWidth(350);
        }

        tableServicoexecutar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serviços ", "Preço"
            }
        ));
        tableServicoexecutar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableServicoexecutarMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableServicoexecutar);

        painelFinal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        labelPagamento.setText("Forma de Pagar");

        escolhaPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cartão de Crédito", "Cartão de Débito", "PIX", "Dinheiro" }));

        labelTotal.setText("TOTAL R$:");

        gerarOspdf.setText("Gerar");
        gerarOspdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerarOspdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelFinalLayout = new javax.swing.GroupLayout(painelFinal);
        painelFinal.setLayout(painelFinalLayout);
        painelFinalLayout.setHorizontalGroup(
            painelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelFinalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gerarOspdf)
                    .addGroup(painelFinalLayout.createSequentialGroup()
                        .addGroup(painelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(painelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(escolhaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        painelFinalLayout.setVerticalGroup(
            painelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelFinalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTotal)
                    .addComponent(labelPagamento))
                .addGap(18, 18, 18)
                .addGroup(painelFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(escolhaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(gerarOspdf)
                .addContainerGap())
        );

        javax.swing.GroupLayout ordemServicoLayout = new javax.swing.GroupLayout(ordemServico);
        ordemServico.setLayout(ordemServicoLayout);
        ordemServicoLayout.setHorizontalGroup(
            ordemServicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelVeiculos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(ordemServicoLayout.createSequentialGroup()
                .addGroup(ordemServicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ordemServicoLayout.createSequentialGroup()
                        .addGroup(ordemServicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Servico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 914, Short.MAX_VALUE))
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ordemServicoLayout.createSequentialGroup()
                        .addComponent(painelFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(ordemServicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(Pecas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        ordemServicoLayout.setVerticalGroup(
            ordemServicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ordemServicoLayout.createSequentialGroup()
                .addComponent(panelNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelVeiculos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ordemServicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ordemServicoLayout.createSequentialGroup()
                        .addComponent(Pecas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(ordemServicoLayout.createSequentialGroup()
                        .addComponent(Servico, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(painelFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelScrollLayout = new javax.swing.GroupLayout(panelScroll);
        panelScroll.setLayout(panelScrollLayout);
        panelScrollLayout.setHorizontalGroup(
            panelScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ordemServico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelScrollLayout.setVerticalGroup(
            panelScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelScrollLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ordemServico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textocpfcnpjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textocpfcnpjActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textocpfcnpjActionPerformed

    private void statusComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusComboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusComboxActionPerformed

    private void textocpfcnpjKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textocpfcnpjKeyReleased
        ListarCpfCnpj();
    }//GEN-LAST:event_textocpfcnpjKeyReleased

    private void ListasNomesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListasNomesMouseClicked
        buscarCpfCnpj();
    }//GEN-LAST:event_ListasNomesMouseClicked

    private void gerarOspdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerarOspdfActionPerformed
        // Coletando os dados da interface gráfica
        String nomeCliente = textoNome.getText();
        String cpfCnpj = textocpfcnpj.getText();
        String endereco = textEndereco.getText();
        String telefone = textTelefones.getText();
        String email = textEmail.getText();
        String modeloVeiculo = textModelo.getText();
        String placaVeiculo = textPlaca.getText();
        String marcaVeiculo = textMarca.getText();

        // Coletando os serviços e peças das tabelas
        String servicos = coletarServicosDaTabela();
        String pecas = coletarPecasDaTabela();

        String valorTotal = textValorTotal.getText();

        // Criando o arquivo PDF
        try {
            // Caminho do arquivo PDF de saída
            String dest = "OrdemServico_" + nomeCliente + ".pdf";
            PdfWriter writer = new PdfWriter(dest);
            com.itextpdf.kernel.pdf.PdfDocument pdf = new com.itextpdf.kernel.pdf.PdfDocument(writer);
            Document document = new Document(pdf);

            document.add(new Paragraph("MECANICA VIANA")
                    .setBold().setFontSize(20).setTextAlignment(TextAlignment.CENTER));
            document.add(new Paragraph("RUA 222 QD 98 LT 46")
                    .setFontSize(12).setTextAlignment(TextAlignment.CENTER));
            document.add(new Paragraph("Próximo à Paróquia São Francisco de Assis")
                    .setFontSize(12).setTextAlignment(TextAlignment.CENTER));
            document.add(new Paragraph("Telefone: (62) 3095-1614 | (62) 3092-8775")
                    .setFontSize(12).setTextAlignment(TextAlignment.CENTER));
            document.add(new Paragraph("Email: mecanicaviana222@hotmail.com")
                    .setFontSize(12).setTextAlignment(TextAlignment.CENTER));
            document.add(new Paragraph("\n"));

            // Título do relatório
            document.add(new Paragraph("Ordem de Serviço")
                    .setBold().setFontSize(18).setTextAlignment(TextAlignment.CENTER));

            document.add(new Paragraph("\n"));

            // Informações do cliente
            document.add(new Paragraph("Cliente: " + nomeCliente)
                    .setFontSize(12).setTextAlignment(TextAlignment.LEFT));
            document.add(new Paragraph("CPF/CNPJ: " + cpfCnpj)
                    .setFontSize(12).setTextAlignment(TextAlignment.LEFT));
            document.add(new Paragraph("Endereço: " + endereco)
                    .setFontSize(12).setTextAlignment(TextAlignment.LEFT));
            document.add(new Paragraph("Telefone: " + telefone)
                    .setFontSize(12).setTextAlignment(TextAlignment.LEFT));
            document.add(new Paragraph("Email: " + email)
                    .setFontSize(12).setTextAlignment(TextAlignment.LEFT));
            document.add(new Paragraph("Veículo: " + modeloVeiculo + " - " + marcaVeiculo + " - " + placaVeiculo)
                    .setFontSize(12).setTextAlignment(TextAlignment.LEFT));

            document.add(new Paragraph("\n"));

            // Adicionando uma linha divisória
            LineSeparator separator = new LineSeparator(new SolidLine());
            document.add(separator);

            // Detalhes dos serviços
            document.add(new Paragraph("Serviços:").setBold().setFontSize(14).setTextAlignment(TextAlignment.LEFT));
            if (!servicos.isEmpty()) {
                // Exibindo a lista de serviços em uma tabela
                Table tabelaServicos = new Table(1);
                tabelaServicos.addCell(new Cell().add(new Paragraph("Serviço")));
                String[] servicosArray = servicos.split("\n");
                for (String servico : servicosArray) {
                    tabelaServicos.addCell(new Cell().add(new Paragraph(servico)));
                }
                document.add(tabelaServicos);
            } else {
                document.add(new Paragraph("Nenhum serviço selecionado.")
                        .setFontSize(12).setTextAlignment(TextAlignment.LEFT));
            }

            document.add(new Paragraph("\n"));

            // Detalhes das peças
            document.add(new Paragraph("Peças:").setBold().setFontSize(14).setTextAlignment(TextAlignment.LEFT));
            if (!pecas.isEmpty()) {
                // Exibindo a lista de peças em uma tabela
                Table tabelaPecas = new Table(1);
                tabelaPecas.addCell(new Cell().add(new Paragraph("Peça")));
                String[] pecasArray = pecas.split("\n");
                for (String peca : pecasArray) {
                    tabelaPecas.addCell(new Cell().add(new Paragraph(peca)));
                }
                document.add(tabelaPecas);
            } else {
                document.add(new Paragraph("Nenhuma peça selecionada.")
                        .setFontSize(12).setTextAlignment(TextAlignment.LEFT));
            }

            document.add(new Paragraph("\n"));

            // Valor total
            document.add(new Paragraph("Valor Total: R$ " + valorTotal)
                    .setBold().setFontSize(14).setTextAlignment(TextAlignment.LEFT));

            // Fechar o documento
            document.close();

            // Exibindo mensagem de sucesso
            JOptionPane.showMessageDialog(null, "Ordem de Serviço gerada com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar a Ordem de Serviço.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_gerarOspdfActionPerformed

    private void textServicosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textServicosKeyReleased
        try {
            listarServicos(); // Lista os serviços conforme o texto digitado
        } catch (Exception e) {
            System.out.println("Erro ao listar serviços: " + e.getMessage());
        }
    }//GEN-LAST:event_textServicosKeyReleased

    private void listServicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listServicosMouseClicked
        try {
            buscarServicos(); // Busca o serviço ao clicar na lista
            // Esconde a lista após o clique

        } catch (Exception ex) {
            Logger.getLogger(OrdemServicoview.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listServicosMouseClicked

    private void adicionarServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarServicoActionPerformed
        try {
            // Obter os dados do serviço a partir da interface
            String nomeServico = textServicos.getText(); // Nome do serviço (campo de texto)
            String precoStr = textValor.getText(); // Preço do serviço (campo de texto)

            // Verifique se os campos não estão vazios
            if (nomeServico.isEmpty() || precoStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, selecione um serviço e informe o preço.",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Converter o preço para double
            double precoServico = Double.parseDouble(precoStr.replace("R$", "").trim().replace(",", "."));

            // Adicionar o serviço na tabela da interface gráfica
            adicionarServicoNaTabela(nomeServico, precoServico);

            // Exibir uma mensagem de sucesso
            JOptionPane.showMessageDialog(this, "Serviço adicionado com sucesso.",
                    "Sucesso", JOptionPane.INFORMATION_MESSAGE);

        } catch (NumberFormatException e) {
            // Caso o preço não seja válido
            JOptionPane.showMessageDialog(this, "Preço inválido. Verifique o valor informado.",
                    "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Para qualquer outro erro
            JOptionPane.showMessageDialog(this, "Erro ao adicionar o serviço: " + e.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_adicionarServicoActionPerformed

    private void tableServicoexecutarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableServicoexecutarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableServicoexecutarMouseClicked

    private void removerServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerServicoActionPerformed
        try {
            // Obtém o modelo da tabela
            DefaultTableModel model = (DefaultTableModel) tableServicoexecutar.getModel();

            // Obtém o índice da linha selecionada
            int selectedRow = tableServicoexecutar.getSelectedRow();

            // Verifica se alguma linha foi selecionada
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Por favor, selecione um serviço para remover.",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Confirma a remoção do serviço
            int response = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja remover o serviço?",
                    "Confirmar Remoção", JOptionPane.YES_NO_OPTION);

            if (response == JOptionPane.YES_OPTION) {
                // Remove a linha selecionada
                model.removeRow(selectedRow);
                JOptionPane.showMessageDialog(this, "Serviço removido com sucesso.",
                        "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao remover o serviço: " + e.getMessage(),
                    "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removerServicoActionPerformed
    private void adicionarServicoNaTabela(String nome, double preco) {
        // Obtém o modelo da tabela (DefaultTableModel)
        DefaultTableModel model = (DefaultTableModel) tableServicoexecutar.getModel();

        // Adiciona os dados na tabela (nome e preço)
        model.addRow(new Object[]{nome, preco});
    }

    private void listarServicos() throws Exception {
        DefaultListModel<String> model = new DefaultListModel<>();
        listServicos.setModel(model);

        // Consulta SQL para buscar os serviços com base no texto digitado
        String readListaServico = "SELECT nome, preco_unit FROM servicos WHERE nome LIKE ? ORDER BY nome";

        try {
            // Estabelecendo a conexão com o banco de dados
            Connection conexao = ConexaoBD.getConexao();

            // Preparando a consulta
            PreparedStatement preparedStatement = conexao.prepareStatement(readListaServico);
            preparedStatement.setString(1, textServicos.getText() + "%"); // Filtra os serviços conforme o texto digitado

            // Executando a consulta
            ResultSet rs = preparedStatement.executeQuery();

            model.clear(); // Limpa a lista antes de adicionar novos elementos

            while (rs.next()) {
                String nomeServico = rs.getString("nome");
                double precoServico = rs.getDouble("preco_unit");
                model.addElement(nomeServico + " - R$ " + precoServico); // Adiciona o nome e preço formatado
            }

            rs.close();
            preparedStatement.close();

            // Tornando a lista visível novamente quando houver serviços
            if (!model.isEmpty()) {
                ScrollServicos.setVisible(true);
                listServicos.setVisible(true);
            }

        } catch (SQLException e) {
            System.out.println("Erro ao listar serviços: " + e.getMessage());
        }
    }

    private void buscarServicos() throws Exception {
        String nomeSelecionado = listServicos.getSelectedValue(); // Pega o nome do serviço selecionado
        if (nomeSelecionado != null) {
            try {
                // Busca o preço do serviço selecionado
                String sqlPreco = "SELECT preco_unit FROM servicos WHERE nome = ?";
                Connection conexao = ConexaoBD.getConexao();
                PreparedStatement stmtPreco = conexao.prepareStatement(sqlPreco);
                stmtPreco.setString(1, nomeSelecionado.split(" - ")[0]); // Pega o nome antes do " - "
                ResultSet rsPreco = stmtPreco.executeQuery();

                if (rsPreco.next()) {
                    double preco = rsPreco.getDouble("preco_unit");

                    // Atualizando os campos de texto
                    textServicos.setText(nomeSelecionado.split(" - ")[0]); // Nome do serviço
                    textValor.setText(String.format("R$ %.2f", preco)); // Preço formatado
                    ScrollServicos.setVisible(false);
                    listServicos.setVisible(false);
                    rsPreco.close();
                    stmtPreco.close();
                }
            } catch (SQLException e) {
                System.out.println("Erro ao buscar preço do serviço: " + e.getMessage());
            }
        }
    }
//======================================================================================================================================

    private void ListarCpfCnpj() {
        DefaultListModel<String> model = new DefaultListModel<>();
        ListasNomes.setModel(model);

        // Consulta SQL ajustada para buscar CPF ou CNPJ
        String readLista = "SELECT COALESCE(pf.cpf, pj.cnpj) AS identificador "
                + "FROM clientes c "
                + "LEFT JOIN pessoa_fisica pf ON c.id = pf.id_cliente "
                + "LEFT JOIN pessoa_juridica pj ON c.id = pj.id_cliente "
                + "WHERE COALESCE(pf.cpf, pj.cnpj) LIKE ? "
                + "ORDER BY identificador";

        try {
            // Estabelecendo a conexão com o banco de dados
            Connection conexao = ConexaoBD.getConexao();

            PreparedStatement preparedStatement = conexao.prepareStatement(readLista);
            preparedStatement.setString(1, textocpfcnpj.getText() + "%"); // Busca com o início do CPF/CNPJ

            // Executando a consulta
            ResultSet rs = preparedStatement.executeQuery();

            model.clear();

            while (rs.next()) {
                ScrollLista.setVisible(true);
                ListasNomes.setVisible(true);
                model.addElement(rs.getString("identificador")); // Adiciona CPF ou CNPJ na lista
            }

            rs.close();
            preparedStatement.close();
        } catch (Exception e) {
            System.out.println("Erro ao listar CPF/CNPJ: " + e);
        }
    }

    private void buscarCpfCnpj() {
        int linha = ListasNomes.getSelectedIndex();

        if (linha >= 0) {
            // Consulta SQL para buscar os dados do cliente com base no CPF ou CNPJ
            String sqlCliente = "SELECT c.id AS id_cliente, c.nome, c.email, c.endereco, c.telefone, "
                    + "pf.cpf, pj.cnpj, pj.contato, pj.insc_estadual "
                    + "FROM clientes c "
                    + "LEFT JOIN pessoa_fisica pf ON c.id = pf.id_cliente "
                    + "LEFT JOIN pessoa_juridica pj ON c.id = pj.id_cliente "
                    + "WHERE COALESCE(pf.cpf, pj.cnpj) LIKE ? "
                    + "ORDER BY COALESCE(pf.cpf, pj.cnpj) LIMIT 1 OFFSET ?";

            try {
                // Estabelecendo a conexão com o banco de dados
                Connection conexao = ConexaoBD.getConexao();

                PreparedStatement preparedStatement = conexao.prepareStatement(sqlCliente);
                preparedStatement.setString(1, textocpfcnpj.getText() + "%"); // CPF ou CNPJ com wildcard
                preparedStatement.setInt(2, linha); // Offset baseado na linha selecionada

                ResultSet rs = preparedStatement.executeQuery();

                if (rs.next()) {
                    // Preenchendo os campos com os dados do cliente
                    ScrollLista.setVisible(false);
                    textocpfcnpj.setText(rs.getString("cpf") != null ? rs.getString("cpf") : rs.getString("cnpj"));
                    textEmail.setText(rs.getString("email"));
                    textEndereco.setText(rs.getString("endereco"));
                    textTelefones.setText(rs.getString("telefone"));

                    // Nome do cliente
                    textoNome.setText(rs.getString("nome"));

                    // Dados específicos de pessoa jurídica
                    textContato.setText(rs.getString("contato") != null ? rs.getString("contato") : "");
                    textInsEst.setText(rs.getString("insc_estadual") != null ? rs.getString("insc_estadual") : "");

                } else {
                    JOptionPane.showMessageDialog(null, "Cliente não encontrado!", "Erro", JOptionPane.ERROR_MESSAGE);
                }

                rs.close();
                preparedStatement.close();
            } catch (Exception e) {
                System.out.println("Erro ao buscar cliente: " + e);
            }
        }
    }

    private String coletarServicosDaTabela() {
        // Coleta os serviços da tabela e retorna em formato String
        StringBuilder servicos = new StringBuilder();
        for (int i = 0; i < tableServicoexecutar.getRowCount(); i++) {
            servicos.append(tableServicoexecutar.getValueAt(i, 0)).append("\n");
        }
        return servicos.toString();
    }

    private String coletarPecasDaTabela() {
        // Coleta as peças da tabela e retorna em formato String
        StringBuilder pecas = new StringBuilder();
        for (int i = 0; i < tablePecassub.getRowCount(); i++) {
            pecas.append(tablePecassub.getValueAt(i, 0)).append("\n");
        }
        return pecas.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrdemServicoview.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrdemServicoview.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrdemServicoview.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrdemServicoview.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new OrdemServicoview().setVisible(true);

                } catch (Exception ex) {
                    Logger.getLogger(OrdemServicoview.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelCodigoOs;
    private javax.swing.JList<String> ListasNomes;
    private javax.swing.JPanel Pecas;
    private javax.swing.JScrollPane ScrollLista;
    private javax.swing.JScrollPane ScrollServicos;
    private javax.swing.JPanel Servico;
    private javax.swing.JButton adicionarColaborador;
    private javax.swing.JButton adicionarPecas;
    private javax.swing.JButton adicionarServico;
    private javax.swing.JComboBox<String> comboxPecas;
    private javax.swing.JComboBox<String> escolhaPagamento;
    private javax.swing.JButton gerarOspdf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labalEndereco;
    private javax.swing.JLabel labelAcess;
    private javax.swing.JLabel labelChassi;
    private javax.swing.JLabel labelCliente;
    private javax.swing.JLabel labelContato;
    private javax.swing.JLabel labelEmail;
    private javax.swing.JLabel labelEndereco;
    private javax.swing.JLabel labelIdentificador;
    private javax.swing.JLabel labelInsEst;
    private javax.swing.JLabel labelKM;
    private javax.swing.JLabel labelMarca;
    private javax.swing.JLabel labelModelo;
    private javax.swing.JLabel labelPagamento;
    private javax.swing.JLabel labelPecas;
    private javax.swing.JLabel labelPlaca;
    private javax.swing.JLabel labelServico;
    private javax.swing.JLabel labelTotal;
    private javax.swing.JLabel labelValor;
    private javax.swing.JLabel labelVeiculos;
    private javax.swing.JList<String> listServicos;
    private javax.swing.JPanel ordemServico;
    private javax.swing.JPanel painelFinal;
    private javax.swing.JPanel panelCliente;
    private javax.swing.JPanel panelNome;
    private javax.swing.JPanel panelScroll;
    private javax.swing.JPanel panelVeiculos;
    private javax.swing.JButton removerServico;
    private javax.swing.JSpinner spinnerPecas;
    private javax.swing.JComboBox<String> statusCombox;
    private javax.swing.JTable tablePecassub;
    private javax.swing.JTable tableServicoexecutar;
    private javax.swing.JTextField textAccs;
    private javax.swing.JTextField textChassi;
    private javax.swing.JTextField textColaborador;
    private javax.swing.JTextField textContato;
    private javax.swing.JTextField textEmail;
    private javax.swing.JTextField textEndereco;
    private javax.swing.JTextField textInsEst;
    private javax.swing.JTextField textKM;
    private javax.swing.JTextField textMarca;
    private javax.swing.JTextField textModelo;
    private javax.swing.JTextField textPlaca;
    private javax.swing.JTextField textServicos;
    private javax.swing.JTextField textTelefones;
    private javax.swing.JTextField textValor;
    private javax.swing.JTextField textValorTotal;
    private javax.swing.JTextField textcodOS;
    private javax.swing.JTextField textoNome;
    private javax.swing.JTextField textocpfcnpj;
    private javax.swing.JTextField veiculoclienteVinculado;
    // End of variables declaration//GEN-END:variables
}
